`timescale 1ns/1ps

  module master(
	
	input [31:0]apb_write_paddr,apb_read_paddr, 
	input [7:0] apb_write_data,
	input [7:0]PRDATA, 
	input PRESET,PCLK,READ_WRITE,transfer,
	input PREADY,
	
	output PSEL,
	
	output reg PENABLE,
	//output reg [8:0]PADDR,
	output reg [31:0]PADDR,
	output reg PWRITE,
	output reg [7:0]PWDATA,
	output reg [7:0]apb_read_data_out,
	output PSLVERR ); 
   
  reg [1:0] state, next_state;


  reg invalid_setup_error,
      setup_error,
      invalid_read_paddr,
      invalid_write_paddr,
      invalid_write_data ;
  
  localparam IDLE = 2'b00, SETUP = 2'b01, ACCESS = 2'b10 ;


  always @(posedge PCLK)
  begin
	if(!PRESET)
		state <= IDLE;
	else
		state <= next_state; 
  end

  always @(state,transfer,PREADY)

  begin
	if(!PRESET)
	  next_state = IDLE;
	else
          begin
             PWRITE = ~READ_WRITE;
	     case(state)
                  
		     IDLE: begin 
		              PENABLE =0;

		            if(!transfer)
	        	      next_state = IDLE ;
	                    else
			      next_state = SETUP;
	                   end

	       	SETUP:   begin
			    PENABLE =0;

			    if(READ_WRITE) 
	             begin   
						PADDR = apb_read_paddr; 
					 end
			    else 
			      begin   
						PADDR = apb_write_paddr;
						PWDATA = apb_write_data; 
					end
					
			    if(transfer && !PSLVERR)
			      next_state = ACCESS;
		       else
           	   next_state = IDLE;
		        end

	       	ACCESS: 
					begin if(PSEL)
		           PENABLE =1;
					if(transfer & !PSLVERR)
						begin
							if(PREADY)
							begin
								if(!READ_WRITE)
									begin
										next_state = SETUP; 
										PWDATA=apb_write_data;
									end
								else 
									begin
										next_state = SETUP; 
										apb_read_data_out = PRDATA; 
									end
							end
						else next_state = ACCESS;
					end
		       else next_state = IDLE;
			 end
       default: next_state = IDLE; 
 endcase
 end
 end

	 assign PSEL = ((state != IDLE) ? 1'b1 : 1'b0);

  // PSLVERR LOGIC
  
  always @(*)
       begin
        if(!PRESET)
	    begin 
	     setup_error =0;
	     invalid_read_paddr = 0;
	     invalid_write_paddr = 0;
	     invalid_write_paddr =0 ;
	    end
        else
	 begin	
          begin
	  if(state == IDLE && next_state == ACCESS)
   		  setup_error = 1;
	  else setup_error = 0;
          end
          begin
          if((apb_write_data===8'dx) && (!READ_WRITE) && (state==SETUP || state==ACCESS))
		  invalid_write_data =1;
	  else invalid_write_data = 0;
          end
          begin
	  if((apb_read_paddr===32'dx) && READ_WRITE && (state==SETUP || state==ACCESS))
		  invalid_read_paddr = 1;
	  else  invalid_read_paddr = 0;
          end
          begin
          if((apb_write_paddr===32'dx) && (!READ_WRITE) && (state==SETUP || state==ACCESS))
		  invalid_write_paddr =1;
          else invalid_write_paddr =0;
          end
          begin
	  if(state == SETUP)
            begin
                 if(PWRITE)
                      begin
                         if(PADDR==apb_write_paddr && PWDATA==apb_write_data)
                              setup_error=1'b0;
                         else
                               setup_error=1'b1;
                       end
                 else 
                       begin
                          if (PADDR==apb_read_paddr)
                                 setup_error=1'b0;
                          else
                                 setup_error=1'b1;
                       end    
              end 
          
         else setup_error=1'b0;
         end 
       end
       invalid_setup_error = setup_error ||  invalid_read_paddr || invalid_write_data || invalid_write_paddr  ;
     end 

   assign PSLVERR =  invalid_setup_error ;

 endmodule
